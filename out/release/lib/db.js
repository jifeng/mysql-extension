// Generated by CoffeeScript 1.6.3
var DB, events, mysql, os,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

events = require('events');

os = require('options-stream');

mysql = require('mysql');

DB = (function(_super) {
  __extends(DB, _super);

  function DB(args) {
    this.args = args;
    this.options = os({
      host: 'localhost',
      user: 'me',
      password: 'secret'
    }, this.args);
    this.connection = mysql.createConnection(this.options);
    this.connection.connect();
  }

  DB.prototype.query = function(params, cb) {
    var k, sql, v, _ref;
    params = params || {};
    sql = void 0;
    if ('string' === typeof params) {
      sql = params;
    } else if (params.sql && params.params) {
      sql = params.sql;
      _ref = params.params;
      for (k in _ref) {
        v = _ref[k];
        if ('string' === typeof v || 'number' === typeof v) {
          sql = sql.replace(":" + k, this.connection.escape(v));
        } else if (Array.isArray(v)) {
          sql = sql.replace(":" + k, "( " + (this.connection.escape(v)) + " )");
        }
      }
    }
    if (!sql) {
      return cb(new Error("Invalid params " + (JSON.stringify(params))));
    }
    return this.connection.query(sql, function(err, row) {
      if (!err) {
        return cb(err, row);
      }
      err.sql = sql;
      err.params = JSON.stringify(params);
      return cb(err, row);
    });
  };

  DB.prototype.close = function(cb) {
    this.connection.end();
    return cb();
  };

  return DB;

})(events.EventEmitter);

module.exports = function(args) {
  return new DB(args);
};
